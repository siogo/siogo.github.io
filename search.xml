<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[关于this（一）]]></title>
      <url>%2F2017%2F03%2F20%2F%E5%85%B3%E4%BA%8Ethis%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
      <content type="text"><![CDATA[1.1 为什么要用this如果对于有经验的 Javascript 开发者来说 this 都是一种非常复杂的机制，那它到底有用在哪里呢？ 下面我们来解释一下为什么要使用 this： 123456789101112131415161718192021function identify()&#123; return this.name.toUpperCase();&#125;funtion show()&#123; var greeting = &quot;hello,&quot;+identify.call(this);&#125;var me = &#123; name:&quot;reader1&quot;&#125;var you = &#123; name:&quot;reader2&quot;&#125;identify.call(me);indetify.call(you);speak.call(me);speak.call(you); 上面输出结果： READER1 READER2 hello,READER1 hello,READER2 这段代码可以在不同的上下文对象（me 和 you）中重复使用函数 identyfy() 和 speak()，不用针对每个对象编写不同版本的函数。 如果不使用 this，那就需要给 identify() 和 speak()显式传入一个上下文对象。 12345678910function identify(str)&#123; return str.name.toUpperCase();&#125;funtion show(str)&#123; var greeting = &quot;hello,&quot;+identify(str);&#125;identify(you);speak(me) READER2 hello,READER1 然而，this 提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将API设计得更加简洁并且易于复用。 随着使用模式越来越复杂，显示传递上下文对象会让代码变的越来越混乱，使用this则不会这样。 1.2 误解要解释this到底是怎么工作的，首先需要消除关于this的错误认知。 1.2.1 指向自身人们很容易吧 this 理解成指向函数自身，这个推断从英语的语法角度是说得通的。 首先来分析一下这个模式，看看 this 并不像我们所想的那样指向函数本身。 这里记录foo 函数被调用的次数 1234567891011121314functhon foo(num)&#123; console.log(&quot;foo:&quot;+num); //记录foo被调用的次数 this.count++;&#125;foo.count = 0;var i;for(i=0;i&lt;10;i++)&#123; if(i&gt;5)&#123; foo(i); &#125;&#125; foo: 6 foo: 7 foo: 8 foo: 9 foo被调用了多少次？ 1console.log(foo.count); 0 // ????????? consolo.log语句产生了4条输出，证明foo(..)确实被调用了4次，但是foo.count仍然是0.显然从字面意思来理解this是错误的。 执行foo.count = 0时，的确向函数对象foo添加了一个属性 count。但是函数内部代码this.count中的this并不是指向那个函数对象，所以虽然属性名相同，根对象却不相同。 所以，对于我们的例子来说，另一种解决办法是使用foo标识符替代this来引用函数对象： 123456789101112function foo(num)&#123; console.log(&quot;foo:&quot;+num); foo.count++;&#125;foo.count=0;var i;for(i=0;i&lt;10;i++)&#123; if(i&gt;5)&#123; foo(i); &#125;&#125; 然而，这种方法回避了this的问题，并且完全依赖于foo的词法作用域。 所以，另一种方法是强制this指向foo对象： 123456789101112function foo(num)&#123; console.log(&quot;foo&quot;+num); this.count++;&#125;foo.count=0;var i;for(i=0;i&lt;10;i++)&#123; if(i&gt;5)&#123; foo.call(foo,i); &#125;&#125; 1.2.2 this的作用域第二种常见的误解是，this指向函数的作用域。这个问题有点复杂，因为在某种情况下它是正确的，但是在其他情况下它却是错误的。 需要明确的是，this在任何情况下都不指向函数的词法作用域。在javascript内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过javascript代码访问，它存在于javascript引擎内部。 比如这段代码： 12345678910function foo()&#123; var a = 2; this.bar();&#125;function bar()&#123; console.log(this.a);&#125;foo(); a is not defined 这段代码试图通过this.bar()来引用bar()函数。但是这是不能成功的。 1.3 this到底是什么排除了一些错误理解之后，我们来看this到底是一种什么样的机制。 this是在运行时进行绑定的，并不是在代码编写时绑定，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何联系，只取决于函数的调用方式。 当一个函数被调用的时候，会创建一个活动记录（有时候也成为执行上下文）。这个纪录会包含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this就是纪录的其中的一个属性，会在函数执行的过程中用到。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[test2]]></title>
      <url>%2F2017%2F03%2F15%2Ftest2%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[test]]></title>
      <url>%2F2017%2F03%2F15%2Ftest%2F</url>
      <content type="text"><![CDATA[这是第一篇文章也是教程巴拉巴拉 hjfj巴拉巴拉]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F15%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
